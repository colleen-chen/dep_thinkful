{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def partition(lst, start_index, end_index):\n",
    "    pivot = lst[end_index]\n",
    "    # pivot index\n",
    "    i = start_index - 1\n",
    "    for j in range(end_index-1):\n",
    "        if lst[j] < pivot:\n",
    "            i += 1\n",
    "            lst[j], lst[i] = lst[i], lst[j]\n",
    "    lst[i+1], lst[end_index] = lst[end_index], lst[i+1]\n",
    "\n",
    "    return (i+1)\n",
    "\n",
    "def quicksort(lst, start_ind, end_ind):\n",
    "    \"\"\"Quicksort:  start with a pivol point, put items < pivol to left \n",
    "                   put items >= pivot to right. Then performing the same \n",
    "                   to the subsamples until.\n",
    "    \"\"\"\n",
    "    if start_ind < end_ind:\n",
    "        pi = partition(lst, start_ind, end_ind)\n",
    "    \n",
    "        quicksort(lst, start_ind, pi-1)\n",
    "        quicksort(lst, pi+1, end_ind)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def insert_sort(lst):\n",
    "    \"\"\"Insert_sort:     maintain two lists, item in new list being inserted sorted\n",
    "       Input:  a list\n",
    "       Output:  a sorted list.\"\"\"\n",
    "    new_lst = lst\n",
    "    for i in range(len(lst)):\n",
    "        j = i\n",
    "        while j > 0 and (new_lst[j] < new_lst[j-1]):\n",
    "            new_lst[j-1], new_lst[j] = new_lst[j], new_lst[j-1]    \n",
    "            j = j - 1\n",
    "    \n",
    "    return new_lst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def merge(a, b):\n",
    "    \"\"\"Merge two sorted lists into one list which is sorted.\"\"\"\n",
    "    if len(a) == 0 or len(b) == 0:\n",
    "        return a or b\n",
    "    \n",
    "    result = []\n",
    "    i, j = 0, 0\n",
    "    while (len(result) < (len(a) + len(b))):\n",
    "        if a[i] < b[j]:\n",
    "            result.append(a[i])\n",
    "            i += 1\n",
    "        else:\n",
    "            result.append(b[j])\n",
    "            j += 1            \n",
    "\n",
    "        if i == len(a) or j == len(b):\n",
    "            result.extend(a[i:] or b[j:])\n",
    "            break\n",
    "            \n",
    "    return result\n",
    "            \n",
    "def merge_sort(lst):\n",
    "    \"\"\"Merge_sort:  recursive sort algorithm.    \"\"\"\n",
    "    if (len(lst) < 2):\n",
    "        return lst\n",
    "    \n",
    "    mid = int(len(lst)/2)\n",
    "    a = merge_sort(lst[:mid])\n",
    "    b = merge_sort(lst[mid:])\n",
    "    \n",
    "    return merge(a, b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# testing\n",
    "import time\n",
    "import random\n",
    "\n",
    "# Set seed.\n",
    "random.seed(a=100)\n",
    "\n",
    "# Create our default list.\n",
    "short_list = list(random.sample(range(1000000), 300))\n",
    "long_list = list(random.sample(range(1000000), 10000))\n",
    "print(len(long_list))\n",
    "\n",
    "start_time = time.time()\n",
    "end_i = len(long_list) - 1\n",
    "quicksort(short_list, 0, end_i)\n",
    "end_time = time.time()\n",
    "print('start time {}'.format(start_time))\n",
    "print('time passed {}'.format(end_time-start_time))\n",
    "\n",
    "print(long_list[:50])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
